Description: Hide private library symbols.
Forwarded: http://libwebsockets.org/trac/ticket/24
Author: Peter Pentchev <roam@ringlet.net>
Last-Update: 2013-02-19

--- a/lib/Makefile.am
+++ b/lib/Makefile.am
@@ -65,7 +65,7 @@
 libwebsockets_la_CFLAGS+= -w -I../win32port/win32helpers -I ../win32port/zlib/
 libwebsockets_la_LDFLAGS+= -lm -luser32 -ladvapi32 -lkernel32 -lgcc
 else
-libwebsockets_la_CFLAGS+= -rdynamic -fPIC -Werror
+libwebsockets_la_CFLAGS+= -rdynamic -fPIC -Werror -fvisibility=hidden
 # notice http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html has rules for how to bump this
 libwebsockets_la_LDFLAGS+=  -version-info 3:0:0
 endif
--- a/lib/libwebsockets.h
+++ b/lib/libwebsockets.h
@@ -46,8 +46,10 @@
 
 #ifdef LWS_DLL
 #ifdef LWS_INTERNAL
+#define LWS_VISIBLE
 #define LWS_EXTERN extern __declspec(dllexport)
 #else
+#define LWS_VISIBLE
 #define LWS_EXTERN extern __declspec(dllimport)
 #endif
 #endif
@@ -55,6 +57,13 @@
 #else // NOT WIN32
 #include <poll.h>
 #include <unistd.h>
+
+#if defined(__GNUC__)
+#define LWS_VISIBLE __attribute__((visibility("default")))
+#else
+#define LWS_VISIBLE
+#endif
+
 #endif
 
 #include <assert.h>
@@ -81,7 +90,7 @@
 	LLL_COUNT = 10 /* set to count of valid flags */
 };
 
-LWS_EXTERN void _lws_log(int filter, const char *format, ...);
+LWS_VISIBLE LWS_EXTERN void _lws_log(int filter, const char *format, ...);
 
 /* notice, warn and log are always compiled in */
 #define lwsl_notice(...) _lws_log(LLL_NOTICE, __VA_ARGS__)
@@ -101,7 +110,7 @@
 #define lwsl_ext(...)  _lws_log(LLL_EXT, __VA_ARGS__)
 #define lwsl_client(...) _lws_log(LLL_CLIENT, __VA_ARGS__)
 #define lwsl_latency(...) _lws_log(LLL_LATENCY, __VA_ARGS__)
-LWS_EXTERN void lwsl_hexdump(void *buf, size_t len);
+LWS_VISIBLE LWS_EXTERN void lwsl_hexdump(void *buf, size_t len);
 
 #else /* no debug */
 
@@ -586,7 +595,7 @@
  *		pollfd struct for this socket descriptor.  If you are using the
  *		internal polling loop, you can just ignore it.
  */
-LWS_EXTERN int callback(struct libwebsocket_context *context,
+LWS_VISIBLE LWS_EXTERN int callback(struct libwebsocket_context *context,
 			struct libwebsocket *wsi,
 			 enum libwebsocket_callback_reasons reason, void *user,
 							  void *in, size_t len);
@@ -655,7 +664,7 @@
  *		buffer safely, it should copy the data into its own buffer and
  *		set the lws_tokens token pointer to it.
  */
-LWS_EXTERN int extension_callback(struct libwebsocket_context *context,
+LWS_VISIBLE LWS_EXTERN int extension_callback(struct libwebsocket_context *context,
 			struct libwebsocket_extension *ext,
 			struct libwebsocket *wsi,
 			enum libwebsocket_extension_callback_reasons reason,
@@ -787,27 +796,27 @@
 
 };
 
-LWS_EXTERN
+LWS_VISIBLE LWS_EXTERN
 void lws_set_log_level(int level,
 			void (*log_emit_function)(int level, const char *line));
 
-LWS_EXTERN void
+LWS_VISIBLE LWS_EXTERN void
 lwsl_emit_syslog(int level, const char *line);
 
-LWS_EXTERN struct libwebsocket_context *
+LWS_VISIBLE LWS_EXTERN struct libwebsocket_context *
 libwebsocket_create_context(struct lws_context_creation_info *info);
 
-LWS_EXTERN void
+LWS_VISIBLE LWS_EXTERN void
 libwebsocket_context_destroy(struct libwebsocket_context *context);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_service(struct libwebsocket_context *context, int timeout_ms);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_service_fd(struct libwebsocket_context *context,
 							 struct pollfd *pollfd);
 
-LWS_EXTERN void *
+LWS_VISIBLE LWS_EXTERN void *
 libwebsocket_context_user(struct libwebsocket_context *context);
 
 /*
@@ -844,48 +853,48 @@
 #define LWS_SEND_BUFFER_PRE_PADDING (4 + 10 + (2 * MAX_MUX_RECURSION))
 #define LWS_SEND_BUFFER_POST_PADDING 4
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_write(struct libwebsocket *wsi, unsigned char *buf, size_t len,
 				     enum libwebsocket_write_protocol protocol);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsockets_serve_http_file(struct libwebsocket_context *context,
 			struct libwebsocket *wsi, const char *file,
 						     const char *content_type);
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsockets_serve_http_file_fragment(struct libwebsocket_context *context,
 			struct libwebsocket *wsi);
 
-LWS_EXTERN const struct libwebsocket_protocols *
+LWS_VISIBLE LWS_EXTERN const struct libwebsocket_protocols *
 libwebsockets_get_protocol(struct libwebsocket *wsi);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_callback_on_writable(struct libwebsocket_context *context,
 						      struct libwebsocket *wsi);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_callback_on_writable_all_protocol(
 				 const struct libwebsocket_protocols *protocol);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_get_socket_fd(struct libwebsocket *wsi);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_is_final_fragment(struct libwebsocket *wsi);
 
-LWS_EXTERN unsigned char
+LWS_VISIBLE LWS_EXTERN unsigned char
 libwebsocket_get_reserved_bits(struct libwebsocket *wsi);
 
-LWS_EXTERN void *
+LWS_VISIBLE LWS_EXTERN void *
 libwebsocket_ensure_user_space(struct libwebsocket *wsi);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_rx_flow_control(struct libwebsocket *wsi, int enable);
 
-LWS_EXTERN size_t
+LWS_VISIBLE LWS_EXTERN size_t
 libwebsockets_remaining_packet_payload(struct libwebsocket *wsi);
 
-LWS_EXTERN struct libwebsocket *
+LWS_VISIBLE LWS_EXTERN struct libwebsocket *
 libwebsocket_client_connect(struct libwebsocket_context *clients,
 			      const char *address,
 			      int port,
@@ -896,7 +905,7 @@
 			      const char *protocol,
 			      int ietf_version_or_minus_one);
 
-LWS_EXTERN struct libwebsocket *
+LWS_VISIBLE LWS_EXTERN struct libwebsocket *
 libwebsocket_client_connect_extended(struct libwebsocket_context *clients,
 			      const char *address,
 			      int port,
@@ -908,46 +917,46 @@
 			      int ietf_version_or_minus_one,
 			      void *userdata);
 
-LWS_EXTERN const char *
+LWS_VISIBLE LWS_EXTERN const char *
 libwebsocket_canonical_hostname(struct libwebsocket_context *context);
 
 
-LWS_EXTERN void
+LWS_VISIBLE LWS_EXTERN void
 libwebsockets_get_peer_addresses(struct libwebsocket_context *context,
 		struct libwebsocket *wsi, int fd, char *name, int name_len,
 					char *rip, int rip_len);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsockets_get_random(struct libwebsocket_context *context,
 							    void *buf, int len);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_daemonize(const char *_lock_path);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_send_pipe_choked(struct libwebsocket *wsi);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_frame_is_binary(struct libwebsocket *wsi);
 
-LWS_EXTERN unsigned char *
+LWS_VISIBLE LWS_EXTERN unsigned char *
 libwebsockets_SHA1(const unsigned char *d, size_t n, unsigned char *md);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_b64_encode_string(const char *in, int in_len, char *out, int out_size);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_b64_decode_string(const char *in, char *out, int out_size);
 
-LWS_EXTERN const char *
+LWS_VISIBLE LWS_EXTERN const char *
 lws_get_library_version(void);
 
 /* access to headers... only valid while headers valid */
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_hdr_total_length(struct libwebsocket *wsi, enum lws_token_indexes h);
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 lws_hdr_copy(struct libwebsocket *wsi, char *dest, int len,
 						enum lws_token_indexes h);
 
@@ -956,13 +965,13 @@
  * useful when integrating with other app poll loop service code.
  */
 
-LWS_EXTERN int
+LWS_VISIBLE LWS_EXTERN int
 libwebsocket_read(struct libwebsocket_context *context,
 				struct libwebsocket *wsi,
 					       unsigned char *buf, size_t len);
 
 #ifndef LWS_NO_EXTENSIONS
-LWS_EXTERN struct libwebsocket_extension *libwebsocket_get_internal_extensions();
+LWS_VISIBLE LWS_EXTERN struct libwebsocket_extension *libwebsocket_get_internal_extensions();
 #endif
 
 #ifdef __cplusplus
--- a/lib/daemonize.c
+++ b/lib/daemonize.c
@@ -21,6 +21,8 @@
 #include <unistd.h>
 #include <errno.h>
 
+#include "private-libwebsockets.h"
+
 int pid_daemon;
 static char *lock_path;
 
@@ -89,7 +91,7 @@
  * The process context you called from has been terminated then.
  */
 
-int
+LWS_VISIBLE int
 lws_daemonize(const char *_lock_path)
 {
 	pid_t sid, parent;
--- a/lib/libwebsockets.c
+++ b/lib/libwebsockets.c
@@ -91,7 +91,7 @@
  *	was built from
  */
 
-const char *
+LWS_VISIBLE const char *
 lws_get_library_version(void)
 {
 	return library_version;
@@ -443,7 +443,7 @@
  *	determined, they will be returned as valid zero-length strings.
  */
 
-void
+LWS_VISIBLE void
 libwebsockets_get_peer_addresses(struct libwebsocket_context *context,
 	struct libwebsocket *wsi, int fd, char *name, int name_len,
 					char *rip, int rip_len)
@@ -516,7 +516,7 @@
 	lws_latency(context, wsi, "libwebsockets_get_peer_addresses", ret, 1);
 }
 
-int libwebsockets_get_random(struct libwebsocket_context *context,
+LWS_VISIBLE int libwebsockets_get_random(struct libwebsocket_context *context,
 							     void *buf, int len)
 {
 	int n;
@@ -606,7 +606,7 @@
 	return 0;
 }
 
-int lws_send_pipe_choked(struct libwebsocket *wsi)
+LWS_VISIBLE int lws_send_pipe_choked(struct libwebsocket *wsi)
 {
 	struct pollfd fds;
 
@@ -805,7 +805,7 @@
  *	including listen accepts, http files as well as websocket protocol.
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_service_fd(struct libwebsocket_context *context,
 							  struct pollfd *pollfd)
 {
@@ -1067,7 +1067,7 @@
  *	context.  After calling this, any further use of the context is
  *	undefined.
  */
-void
+LWS_VISIBLE void
 libwebsocket_context_destroy(struct libwebsocket_context *context)
 {
 #ifndef LWS_NO_EXTENSIONS
@@ -1194,7 +1194,7 @@
  *	nothing is pending, or as soon as it services whatever was pending.
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_service(struct libwebsocket_context *context, int timeout_ms)
 {
 	int n;
@@ -1278,7 +1278,7 @@
  * @wsi:	Websocket connection instance to get callback for
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_callback_on_writable(struct libwebsocket_context *context,
 						      struct libwebsocket *wsi)
 {
@@ -1326,7 +1326,7 @@
  * @protocol:	Protocol whose connections will get callbacks
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_callback_on_writable_all_protocol(
 				  const struct libwebsocket_protocols *protocol)
 {
@@ -1376,7 +1376,7 @@
  * @wsi:	Websocket connection instance
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_get_socket_fd(struct libwebsocket *wsi)
 {
 	return wsi->sock;
@@ -1490,7 +1490,7 @@
  * @enable:	0 = disable read servicing for this connection, 1 = enable
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_rx_flow_control(struct libwebsocket *wsi, int enable)
 {
 	wsi->u.ws.rxflow_change_to = 2 | !!enable;
@@ -1510,7 +1510,7 @@
  */
 
 
-extern const char *
+LWS_VISIBLE extern const char *
 libwebsocket_canonical_hostname(struct libwebsocket_context *context)
 {
 	return (const char *)context->canonical_hostname;
@@ -1600,7 +1600,7 @@
  *	one place; they're all handled in the user callback.
  */
 
-struct libwebsocket_context *
+LWS_VISIBLE struct libwebsocket_context *
 libwebsocket_create_context(struct lws_context_creation_info *info)
 {
 	struct libwebsocket_context *context = NULL;
@@ -2132,25 +2132,25 @@
  *	this is how you can get a pointer to the active protocol if needed.
  */
 
-const struct libwebsocket_protocols *
+LWS_VISIBLE const struct libwebsocket_protocols *
 libwebsockets_get_protocol(struct libwebsocket *wsi)
 {
 	return wsi->protocol;
 }
 
-int
+LWS_VISIBLE int
 libwebsocket_is_final_fragment(struct libwebsocket *wsi)
 {
 	return wsi->u.ws.final;
 }
 
-unsigned char
+LWS_VISIBLE unsigned char
 libwebsocket_get_reserved_bits(struct libwebsocket *wsi)
 {
 	return wsi->u.ws.rsv;
 }
 
-void *
+LWS_VISIBLE void *
 libwebsocket_ensure_user_space(struct libwebsocket *wsi)
 {
 	/* allocate the per-connection user memory (if any) */
@@ -2188,12 +2188,12 @@
 }
 
 #ifdef WIN32
-void lwsl_emit_syslog(int level, const char *line)
+LWS_VISIBLE void lwsl_emit_syslog(int level, const char *line)
 {
 	lwsl_emit_stderr(level, line);
 }
 #else
-void lwsl_emit_syslog(int level, const char *line)
+LWS_VISIBLE void lwsl_emit_syslog(int level, const char *line)
 {
 	int syslog_level = LOG_DEBUG;
 
@@ -2215,7 +2215,7 @@
 }
 #endif
 
-void _lws_log(int filter, const char *format, ...)
+LWS_VISIBLE void _lws_log(int filter, const char *format, ...)
 {
 	char buf[256];
 	va_list ap;
@@ -2242,7 +2242,7 @@
  *	emission on stderr.
  */
 
-void lws_set_log_level(int level, void (*log_emit_function)(int level,
+LWS_VISIBLE void lws_set_log_level(int level, void (*log_emit_function)(int level,
 							      const char *line))
 {
 	log_level = level;
--- a/lib/output.c
+++ b/lib/output.c
@@ -48,7 +48,7 @@
 
 #ifdef _DEBUG
 
-void lwsl_hexdump(void *vbuf, size_t len)
+LWS_VISIBLE void lwsl_hexdump(void *vbuf, size_t len)
 {
 	int n;
 	int m;
@@ -276,7 +276,7 @@
  *	packet while not burdening the user code with any protocol knowledge.
  */
 
-int libwebsocket_write(struct libwebsocket *wsi, unsigned char *buf,
+LWS_VISIBLE int libwebsocket_write(struct libwebsocket *wsi, unsigned char *buf,
 			  size_t len, enum libwebsocket_write_protocol protocol)
 {
 	int n;
@@ -479,7 +479,7 @@
 	return lws_issue_raw_ext_access(wsi, buf - pre, len + pre + post);
 }
 
-int libwebsockets_serve_http_file_fragment(
+LWS_VISIBLE int libwebsockets_serve_http_file_fragment(
 		struct libwebsocket_context *context, struct libwebsocket *wsi)
 {
 	int ret = 0;
@@ -533,7 +533,7 @@
  *	the wsi should be left alone.
  */
 
-int libwebsockets_serve_http_file(struct libwebsocket_context *context,
+LWS_VISIBLE int libwebsockets_serve_http_file(struct libwebsocket_context *context,
 			struct libwebsocket *wsi, const char *file,
 						       const char *content_type)
 {
--- a/lib/base64-decode.c
+++ b/lib/base64-decode.c
@@ -48,7 +48,7 @@
 static const char decode[] = "|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW"
 			     "$$$$$$XYZ[\\]^_`abcdefghijklmnopq";
 
-int
+LWS_VISIBLE int
 lws_b64_encode_string(const char *in, int in_len, char *out, int out_size)
 {
 	unsigned char triple[3];
@@ -97,7 +97,7 @@
  * according to out_size
  */
 
-int
+LWS_VISIBLE int
 lws_b64_decode_string(const char *in, char *out, int out_size)
 {
 	int len;
--- a/lib/client-handshake.c
+++ b/lib/client-handshake.c
@@ -154,7 +154,7 @@
  *	This function creates a connection to a remote server
  */
 
-struct libwebsocket *
+LWS_VISIBLE struct libwebsocket *
 libwebsocket_client_connect(struct libwebsocket_context *context,
 			      const char *address,
 			      int port,
@@ -305,7 +305,7 @@
  *	This function creates a connection to a remote server
  */
 
-struct libwebsocket *
+LWS_VISIBLE struct libwebsocket *
 libwebsocket_client_connect_extended(struct libwebsocket_context *context,
 			      const char *address,
 			      int port,
--- a/lib/extension.c
+++ b/lib/extension.c
@@ -27,7 +27,7 @@
 	}
 };
 
-struct libwebsocket_extension *libwebsocket_get_internal_extensions()
+LWS_VISIBLE struct libwebsocket_extension *libwebsocket_get_internal_extensions()
 {
 	return libwebsocket_internal_extensions;
 }
--- a/lib/handshake.c
+++ b/lib/handshake.c
@@ -53,7 +53,7 @@
  * machine that is completely independent of packet size.
  */
 
-int
+LWS_VISIBLE int
 libwebsocket_read(struct libwebsocket_context *context,
 		     struct libwebsocket *wsi, unsigned char *buf, size_t len)
 {
--- a/lib/parsers.c
+++ b/lib/parsers.c
@@ -321,7 +321,7 @@
 	return 0;
 }
 
-int lws_hdr_total_length(struct libwebsocket *wsi, enum lws_token_indexes h)
+LWS_VISIBLE int lws_hdr_total_length(struct libwebsocket *wsi, enum lws_token_indexes h)
 {
 	int n;
 	int len = 0;
@@ -338,7 +338,7 @@
 	return len;
 }
 
-int lws_hdr_copy(struct libwebsocket *wsi, char *dest, int len,
+LWS_VISIBLE int lws_hdr_copy(struct libwebsocket *wsi, char *dest, int len,
 						enum lws_token_indexes h)
 {
 	int toklen = lws_hdr_total_length(wsi, h);
@@ -625,7 +625,7 @@
  * mode.
  */
 
-int lws_frame_is_binary(struct libwebsocket *wsi)
+LWS_VISIBLE int lws_frame_is_binary(struct libwebsocket *wsi)
 {
 	return wsi->u.ws.frame_is_binary;
 }
@@ -1155,7 +1155,7 @@
  *  Many protocols won't care becuse their packets are always small.
  */
 
-size_t
+LWS_VISIBLE size_t
 libwebsockets_remaining_packet_payload(struct libwebsocket *wsi)
 {
 	return wsi->u.ws.rx_packet_length;
--- a/scripts/kernel-doc
+++ b/scripts/kernel-doc
@@ -1722,6 +1722,7 @@
     my $prototype = shift;
     my $file = shift;
 
+    $prototype =~ s/LWS_VISIBLE +//;
     $prototype =~ s/^static +//;
     $prototype =~ s/^extern +//;
     $prototype =~ s/^asmlinkage +//;
